// Code generated by sqlc. DO NOT EDIT.
// source: comment_queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, post_id, content, votes)
VALUES ($1, $2, $3, $4)
RETURNING id, post_id, content, votes
`

type CreateCommentParams struct {
	ID      uuid.UUID `json:"id"`
	PostID  uuid.UUID `json:"post_id"`
	Content string    `json:"content"`
	Votes   int32     `json:"votes"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.ID,
		arg.PostID,
		arg.Content,
		arg.Votes,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Content,
		&i.Votes,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE from comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, post_id, content, votes FROM comments
WHERE id = $1
`

func (q *Queries) GetComment(ctx context.Context, id uuid.UUID) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Content,
		&i.Votes,
	)
	return i, err
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT id, post_id, content, votes FROM comments
WHERE post_id = $1
`

func (q *Queries) GetCommentsByPost(ctx context.Context, postID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.Content,
			&i.Votes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments 
SET post_id = $1, content = $2, votes = $3
WHERE id = $4
RETURNING id, post_id, content, votes
`

type UpdateCommentParams struct {
	PostID  uuid.UUID `json:"post_id"`
	Content string    `json:"content"`
	Votes   int32     `json:"votes"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, updateComment,
		arg.PostID,
		arg.Content,
		arg.Votes,
		arg.ID,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.PostID,
		&i.Content,
		&i.Votes,
	)
	return i, err
}
