// Code generated by sqlc. DO NOT EDIT.
// source: post_queries.sql

package postgres

import (
	"context"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, thread_id, title, content, votes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, thread_id, title, content, votes
`

type CreatePostParams struct {
	ID       uuid.UUID `json:"id"`
	ThreadID uuid.UUID `json:"thread_id"`
	Title    string    `json:"title"`
	Content  string    `json:"content"`
	Votes    int32     `json:"votes"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.ThreadID,
		arg.Title,
		arg.Content,
		arg.Votes,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Title,
		&i.Content,
		&i.Votes,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, thread_id, title, content, votes FROM posts
WHERE id = $1
`

func (q *Queries) GetPost(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Title,
		&i.Content,
		&i.Votes,
	)
	return i, err
}

const getPostsByThread = `-- name: GetPostsByThread :many
SELECT id, thread_id, title, content, votes FROM posts
WHERE thread_id = $1
`

func (q *Queries) GetPostsByThread(ctx context.Context, threadID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByThread, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.ThreadID,
			&i.Title,
			&i.Content,
			&i.Votes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET thread_id = $1, title = $2, content = $3, votes = $4
WHERE id = $5
RETURNING id, thread_id, title, content, votes
`

type UpdatePostParams struct {
	ThreadID uuid.UUID `json:"thread_id"`
	Title    string    `json:"title"`
	Content  string    `json:"content"`
	Votes    int32     `json:"votes"`
	ID       uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ThreadID,
		arg.Title,
		arg.Content,
		arg.Votes,
		arg.ID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.ThreadID,
		&i.Title,
		&i.Content,
		&i.Votes,
	)
	return i, err
}
